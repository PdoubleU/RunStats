@model RunStats.Models.RunningSession

@{
    ViewData["Title"] = "Create";
}

<h2>Running Session</h2> 

<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" submitdisabledcontrols="true" runat="server" onsubmit="handleSubmit();">
            <div class="form-group">
                <label class="control-label">Start timer</label>
                <input type="checkbox" id="autoStartSessionCheckbox" />
            </div>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Date" class="control-label"></label>
                <input asp-for="Date" class="form-control" id="dateInput" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Distance (meters)</label>
                <input asp-for="Distance" class="form-control" min="0"/>
                <span asp-validation-for="Distance" class="text-danger"></span>
            </div>
            <h6>Duration</h6>
            <div class="form-group" style="display:flex; flex-direction: row;">
                <label for="hours" class="control-label">Hours:</label>
                <input type="number" name="hours" id="hours" min="0" class="form-control" required/>

                <label for="minutes" class="control-label">Minutes:</label>
                <input type="number" name="minutes" id="minutes" min="0" max="60" class="form-control" required/>

                <label for="seconds" class="control-label">Seconds:</label>
                <input type="number" name="seconds" id="seconds" min="0" max="60" class="form-control" required/>

                <input asp-for="Time" class="form-control" id="timeInput" type="hidden"/>
                <span asp-validation-for="Time" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: none;">
                <label asp-for="UserId" class="control-label"></label>
                <input asp-for="UserId" class ="form-control" asp-items="ViewBag.UserId" value="@(ViewBag.UserId)">/>
            </div>
            <div class="form-group">
                <label class="control-label">Exercise Type</label>
                <select asp-for="ExerciseTypeId" class ="form-control" asp-items="ViewBag.ExerciseTypeId"></select>
            </div>
            <div class="form-group">
                <label class="control-label">Shoes Type</label>
                <select asp-for="ShoesId" class ="form-control" asp-items="ViewBag.ShoesId"></select>
            </div>
            <h6>Coordinates:</h6>
            <div class="form-group">
                <label class="control-label">Longitude</label>
                <input name="longitude" class="form-control" id="longitude" readOnly/>
                <label class="control-label">Latitude</label>
                <input name="latitude" class="form-control" id="latitude" readOnly/>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<script type="text/javascript" defer>
    (function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(loadPosition);
        } else {
            console.warn("Geolocation is not supported by this browser.");
        }
    })();

    function loadPosition(position) {
        const latitudeInput = document.getElementById("latitude");
        const longitudeInput = document.getElementById("longitude");
        latitudeInput.value = position.coords.latitude;
        longitudeInput.value = position.coords.longitude;
    };

    function getDateNowInISOStringFormat() {
        const currentDate = new Date();
        // Dodanie zero przed miesiącem i dniem, jeśli są jednocyfrowe
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        const day = currentDate.getDate().toString().padStart(2, '0');
        // Pobranie godziny, minut i sekund w formacie dwucyfrowym
        const hours = currentDate.getHours().toString().padStart(2, '0');
        const minutes = currentDate.getMinutes().toString().padStart(2, '0');
        // Utworzenie pełnej daty w formacie ISO
        const isoDateString = `${currentDate.getFullYear()}-${month}-${day}T${hours}:${minutes}`;

        return isoDateString;
    }

    document.getElementById('autoStartSessionCheckbox').addEventListener('change', function () {
        var dateInput = document.getElementById('dateInput');
        var timeInput = document.getElementById('timeInput');
        hours.readOnly = minutes.readOnly = seconds.readOnly = dateInput.readOnly = timeInput.readOnly = this.checked;  // Zablokuj pola daty i czasu, jeśli checkbox jest zaznaczony
        if (this.checked) {
            const nowString = getDateNowInISOStringFormat();
            dateInput.value = nowString; // Ustaw datę na teraźniejszą, jeśli checkbox jest zaznaczony
            timeInput.disabled = true // zablokuj wysylke pola, baza dostanie nulla i będzie wszystko gites
            // jeśli czas sesji bedzie liczony automatycznie, nie wymagaj podawania czasu
            document.getElementById('hours').required = false;
            document.getElementById('minutes').required = false;
            document.getElementById('seconds').required = false;
        }
        else {
            // odblokuj pole
            timeInput.disabled = false;
            // resetuj pole daty, musi zostac dodane recznie przez uzytkownika
            dateInput.value = null;
            // wymagaj podania trwania treningu, zeby uniemozliwic wysylke formularza
            document.getElementById('hours').required = true;
            document.getElementById('minutes').required = true;
            document.getElementById('seconds').required = true;
        }
    });


    function loadDefaultCoordinates() {
        const lng = document.getElementById("longitude");
        const lat = document.getElementById("latitude");

        if (!lng.value || !lat.value) {
            console.log("TEST");
            const defaultLng = "21.0067249";
            const defaultLat = "52.2319581";

            lng.value = defaultLng;
            lat.value = defaultLat;
        }
    }

    function calculateMilliseconds() {
        var timeInput = document.getElementById('timeInput');
        // jesli pole zostalo wczesniej zablokowane, przerwij:
        if (timeInput.disabled) return true;
        // wyliczenie i ustawienie wartości milisekund w ukrytym polu formularza
        var hours = parseInt(document.getElementById('hours').value) || 0;
        var minutes = parseInt(document.getElementById('minutes').value) || 0;
        var seconds = parseInt(document.getElementById('seconds').value) || 0;
        var totalMilliseconds = (hours * 3600 + minutes * 60 + seconds) * 1000;
        timeInput.value = totalMilliseconds;
    }

    function handleSubmit() {
        loadDefaultCoordinates();
        calculateMilliseconds();
        // Zwrócenie true, aby kontynuować wysyłanie formularza
        return true;
    }

</script>